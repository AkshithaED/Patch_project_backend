# Generated by Django 5.2 on 2025-05-12 18:49

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='HighLevelScope',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('alpine', 'Alpine Linux Base Image'), ('base_os', 'Base OS'), ('tomcat', 'Tomcat'), ('jdk', 'JDK'), ('otds', 'OTDS'), ('otiv', 'OTIV'), ('new_relic', 'New Relic')], max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image_name', models.CharField(default='example.com/image', max_length=255)),
                ('build_number', models.CharField(default='1234', max_length=100)),
                ('release_date', models.DateTimeField(default='2023-01-01')),
                ('ot2_pass', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=3)),
                ('twistlock_report_url', models.URLField(default='http://example.com/report')),
                ('twistlock_report_clean', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('name', models.CharField(default='Default Product Name', max_length=255, primary_key=True, serialize=False)),
                ('version', models.CharField(default='1.0', max_length=50)),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Inactive', 'Inactive')], default='Active', max_length=50)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Release',
            fields=[
                ('name', models.CharField(default='Default Release Name', max_length=255, primary_key=True, serialize=False)),
                ('release_date', models.DateField(default='2023-01-01')),
                ('release_version', models.CharField(default='Default version', max_length=50)),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='ThirdPartyJar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('commons-cli', 'commons-cli'), ('commons-codec', 'commons-codec'), ('commons-io', 'commons-io'), ('log4j', 'log4j'), ('spring-core', 'spring framework (spring-core)'), ('spring-security', 'spring security'), ('xmlsec', 'xmlsec'), ('logback-core', 'logback-core'), ('cxf-core', 'Cxf-core'), ('cxf-bindings-soap', 'Cxf-rt-bindings-soap'), ('cxf-bindings-xml', 'Cxf-rt-bindings-xml'), ('cxf-databinding-jaxb', 'Cxf-rt-databinding-jaxb'), ('cxf-frontend-simple', 'Cxf-rt-frontend-simple'), ('cxf-frontend-jaxws', 'Cxf-rt-frontend-jaxws'), ('cxf-transports-http', 'Cxf-rt-transports-http'), ('cxf-ws-addr', 'Cxf-rt-ws-addr'), ('cxf-wsdl', 'Cxf-rt-wsdl'), ('cxf-ws-policy', 'Cxf-rt-ws-policy'), ('freemarker', 'Freemarker Jar'), ('netty-all', 'netty-all'), ('reactor-netty-http', 'reactor-netty-http'), ('reactor-netty-core', 'reactor-netty-core'), ('libraries-bom', 'libraries-bom'), ('httpcore5', 'httpcore5'), ('guava', 'guava'), ('jaxb-api', 'jaxb-api'), ('json', 'json'), ('logback-classic', 'logback-classic'), ('jakarta-mail-api', 'Jakarta.mail-api'), ('spring-boot-parent', 'spring-boot-starter-parent')], max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('product_manager', 'Product Manager'), ('product_owner', 'Product Owner'), ('end_user', 'End User')], default='end_user', max_length=30)),
                ('groups', models.ManyToManyField(blank=True, related_name='customuser_set', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='customuser_set', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Patch',
            fields=[
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('release_date', models.DateField()),
                ('kick_off', models.DateField()),
                ('code_freeze', models.DateField()),
                ('platform_qa_build', models.DateField()),
                ('client_build_availability', models.DateField()),
                ('description', models.TextField()),
                ('patch_version', models.CharField(max_length=50)),
                ('patch_state', models.CharField(choices=[('new', 'New'), ('rejected', 'Rejected'), ('released', 'Released'), ('verified', 'Verified')], default='new', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('product_images', models.ManyToManyField(related_name='patches', to='product_app.image')),
            ],
        ),
        migrations.CreateModel(
            name='PatchHighLevelScope',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.CharField(max_length=100)),
                ('patch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='product_app.patch')),
                ('scope', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='product_app.highlevelscope')),
            ],
            options={
                'unique_together': {('patch', 'scope')},
            },
        ),
        migrations.AddField(
            model_name='patch',
            name='high_level_scope',
            field=models.ManyToManyField(blank=True, related_name='patches', through='product_app.PatchHighLevelScope', to='product_app.highlevelscope'),
        ),
        migrations.AddField(
            model_name='patch',
            name='related_products',
            field=models.ManyToManyField(related_name='patches', to='product_app.product'),
        ),
        migrations.AddField(
            model_name='image',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='product_app.product'),
        ),
        migrations.AddField(
            model_name='patch',
            name='release',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='patches', to='product_app.release'),
        ),
        migrations.CreateModel(
            name='SecurityIssue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cve_id', models.CharField(default='CVE-1234', max_length=255)),
                ('cvss_score', models.FloatField(default=7.5)),
                ('severity', models.CharField(choices=[('Critical', 'Critical'), ('High', 'High'), ('Medium', 'Medium')], default='High', max_length=50)),
                ('affected_libraries', models.TextField(default='Some Library')),
                ('library_path', models.CharField(blank=True, default='/path/to/library', max_length=500)),
                ('description', models.TextField(default='Security issue description')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('image_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='security_issues_set', to='product_app.image')),
            ],
        ),
        migrations.AddField(
            model_name='image',
            name='security_issues',
            field=models.ManyToManyField(blank=True, related_name='images', to='product_app.securityissue'),
        ),
        migrations.CreateModel(
            name='PatchThirdPartyJar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.CharField(max_length=100)),
                ('remarks', models.TextField(blank=True, null=True)),
                ('patch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='product_app.patch')),
                ('jar', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='product_app.thirdpartyjar')),
            ],
            options={
                'unique_together': {('patch', 'jar')},
            },
        ),
        migrations.AddField(
            model_name='patch',
            name='third_party_jars',
            field=models.ManyToManyField(blank=True, related_name='patches', through='product_app.PatchThirdPartyJar', to='product_app.thirdpartyjar'),
        ),
    ]
